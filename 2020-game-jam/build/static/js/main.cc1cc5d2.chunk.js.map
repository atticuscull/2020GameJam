{"version":3,"sources":["MyCode/PuzzleButton.js","MyCode/Puzzle.js","MyCode/PuzzleOverlay.js","App.js","serviceWorker.js","index.js"],"names":["PuzzleButton","props","useState","currentColor","setCurrentColor","static","className","style","background","colorList","staticColor","onClick","newC","length","Puzzle","puzzleArray","i","rows","temp","j","cols","push","staticSquares","S","initialArray","squareValues","setSquareValues","onSolvePuzzle","solution","useEffect","Object","keys","reduce","a","e","b","f","cellSpacing","cellPadding","map","c","key","r","value","newSquareValues","concat","renderSquare","PuzzleOverlay","showModal","setShowModal","closeModal","isOpen","onAfterOpen","overlay","backgroundColor","contentLabel","App","Boolean","window","location","hostname","match","Modal","setAppElement","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAmCeA,MAjCf,SAAsBC,GAAQ,IAAD,EACaC,mBAAS,GADtB,mBACpBC,EADoB,KACNC,EADM,KAG3B,OAAIH,EAAMI,OAEN,4BACEC,UAAU,gBACVC,MAAO,CACLC,WAAYP,EAAMQ,UAAUR,EAAMS,cAEpCC,QAAS,eAMX,4BACEL,UAAU,gBACVC,MAAO,CACLC,WAAYP,EAAMQ,UAAUN,IAE9BQ,QACE,WACE,IAAIC,GAAQT,EAAe,GAAKF,EAAMQ,UAAUI,OAChDT,EAAgBQ,GAChBX,EAAMU,QAAQC,KATpB,MC4CSE,MAvCf,SAAgBb,GAAQ,IAAD,EACmBC,mBArB1C,SAAsBD,GAEpB,IADA,IAAIc,EAAc,GACTC,EAAI,EAAGA,EAAIf,EAAMgB,KAAMD,IAAK,CAEnC,IADA,IAAIE,EAAO,GACFC,EAAI,EAAGA,EAAIlB,EAAMmB,KAAMD,IAC9BD,EAAKG,KAAK,GAEZN,EAAYM,KAAKH,GAGnB,IAAK,IAAIF,EAAI,EAAGA,EAAIf,EAAMqB,cAAcT,OAAQG,IAAK,CACnD,IAAIO,EAAItB,EAAMqB,cAAcN,GAC5BD,EAAYQ,EAAE,IAAIA,EAAE,IAAMA,EAAE,GAG9B,OAAOR,EAM0CS,CAAavB,IADzC,mBACdwB,EADc,KACAC,EADA,KAEfC,EAAgB1B,EAAM0B,cACtBC,EAAW3B,EAAM2B,SAsBvB,OANAC,qBAAU,WACJC,OAAOC,KAAKN,GAAcO,QAAO,SAACC,EAAGC,GAAJ,OAAUD,GAAKH,OAAOC,KAAKN,EAAaS,IAAIF,QAAO,SAACG,EAAGC,GAAJ,OAAUD,GAAMV,EAAaS,GAAGE,KAAOR,EAASM,GAAGE,MAAK,MAAO,IACrJT,MAED,CAACA,EAAeF,EAAcG,IAG/B,2BAAOtB,UAAU,SAAS+B,YAAY,IAAIC,YAAY,KACpD,+BACE,4BACGR,OAAOC,KAAKN,EAAa,IAAIc,KAAI,SAAAC,GAAC,OAAE,wBAAIC,IAAKD,SAGlD,+BACGV,OAAOC,KAAKN,GAAcc,KAAI,SAAAL,GAAC,OAAI,wBAAIO,IAAKP,GAAIJ,OAAOC,KAAKN,EAAaS,IAAIK,KAAI,SAAAH,GAAC,OAAI,wBAAI9B,UAAU,YAAYmC,IAAKL,GA7B5H,SAAsBM,EAAGF,GACvB,IAAIG,EAAQlB,EAAaiB,GAAGF,GAC5B,OAAQ,kBAAC,EAAD,CACNnC,OAAQsC,EAAQ,EAChBjC,aAAciC,EACdlC,UAAWR,EAAMQ,UACjBE,QAAS,SAACC,GACR,IAAIgC,EAAkB,GAAGC,OAAOpB,GAChCmB,EAAgBF,GAAGF,GAAK5B,EACxBc,EAAgBkB,MAoB0GE,CAAaZ,EAAEE,cCVlIW,MA1Cf,SAAuB9C,GAAQ,IAAD,EACMC,mBAASD,EAAM+C,WADrB,mBACrBA,EADqB,KACVC,EADU,KAO5B,SAASC,IACPD,GAAa,GAQf,OALApB,qBAAU,WACRoB,EAAahD,EAAM+C,aAClB,CAAC/C,EAAOgD,IAIT,kBAAC,IAAD,CACEE,OAAQH,EACRI,YAhBJ,aAiBI7C,MAAO,CAAC8C,QAAS,CAACC,gBAAiB,cACnCC,aAAa,gBACbjD,UAAU,gBAEV,yBAAKA,UAAU,oBACb,kBAAC,EAAD,CACEgB,cAAe,CAAC,CAAC,EAAE,GAAG,IACtBb,UAAW,CAAC,QAAS,QAAS,OAC9BQ,KAAK,IACLG,KAAK,IACLO,cAAeuB,EACftB,SAAU,CAAC,EAAE,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,MAElE,4BAAQtB,UAAU,sBAAsBK,QAASuC,GAAjD,kBCzBOM,MARf,WACE,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAD,CAAe0C,WAAW,MCKZS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAAMC,cAAc,SAEpBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cc1cc5d2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction PuzzleButton(props) {\n  const [currentColor, setCurrentColor] = useState(0);\n\n  if (props.static) {\n    return (\n      <button\n        className=\"puzzle-button\"\n        style={{\n          background: props.colorList[props.staticColor]\n        }}\n        onClick={()=>{}}\n      />\n    )\n  } else {\n\n    return (\n      <button\n        className=\"puzzle-button\"\n        style={{\n          background: props.colorList[currentColor]\n        }}\n        onClick={\n          () => {\n            let newC = (currentColor + 1) % props.colorList.length\n            setCurrentColor(newC);\n            props.onClick(newC);\n          }\n        }\n      > </button>\n    )\n  }\n  \n}\nexport default PuzzleButton;","import React, { useState, useEffect } from \"react\";\nimport PuzzleButton from \"./PuzzleButton\";\n\nfunction initialArray(props) {\n  let puzzleArray = []\n  for (let i = 0; i < props.rows; i++) {\n    let temp = []\n    for (let j = 0; j < props.cols; j++) {\n      temp.push(0);\n    }\n    puzzleArray.push(temp);\n  }\n\n  for (let i = 0; i < props.staticSquares.length; i++) {\n    let S = props.staticSquares[i]\n    puzzleArray[S[0]][S[1]] = S[2];\n  }\n\n  return puzzleArray\n}\n\n\n\nfunction Puzzle(props) {\n  const [squareValues, setSquareValues] = useState(initialArray(props));\n  const onSolvePuzzle = props.onSolvePuzzle;\n  const solution = props.solution;\n  function renderSquare(r, c) {\n    let value = squareValues[r][c];\n    return (<PuzzleButton\n      static={value < 0}\n      staticColor={-value}\n      colorList={props.colorList}\n      onClick={(newC) => {\n        let newSquareValues = [].concat(squareValues);\n        newSquareValues[r][c] = newC;\n        setSquareValues(newSquareValues);\n\n      }}\n    />);\n  }\n\n  useEffect(()=>{\n    if (Object.keys(squareValues).reduce((a, e) => a && Object.keys(squareValues[e]).reduce((b, f) => b && (squareValues[e][f] === solution[e][f]), true), true)){\n      onSolvePuzzle()\n    }\n  }, [onSolvePuzzle, squareValues, solution])\n\n  return(\n    <table className=\"puzzle\" cellSpacing=\"0\" cellPadding=\"0\">\n      <thead>\n        <tr>\n          {Object.keys(squareValues[0]).map(c=><th key={c}/>)}\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(squareValues).map(e => <tr key={e}>{Object.keys(squareValues[e]).map(f => <td className=\"puzzle-td\" key={f}>{renderSquare(e,f)}</td>)}</tr>)}\n      </tbody>\n    </table>\n  )\n}\n\nexport default Puzzle;","import React, { useState, useEffect } from \"react\";\nimport Modal from \"react-modal\";\nimport Puzzle from \"./Puzzle\";\n\nfunction PuzzleOverlay(props) {\n  const [showModal, setShowModal] = useState(props.showModal);\n\n  function afterOpenModal() {\n    \n  }\n\n  function closeModal() {\n    setShowModal(false);\n  }\n\n  useEffect(()=>{\n    setShowModal(props.showModal);\n  }, [props, setShowModal]);\n\n\n  return(\n    <Modal\n      isOpen={showModal}\n      onAfterOpen={afterOpenModal}\n      style={{overlay: {backgroundColor: \"#ffffff3f\"}}}\n      contentLabel=\"Example Modal\"\n      className=\"puzzle-modal\"\n    >\n      <div className=\"puzzle-container\">\n        <Puzzle\n          staticSquares={[[0,0,-2]]}\n          colorList={[\"black\", \"white\", \"red\"]}\n          rows=\"4\"\n          cols=\"4\"\n          onSolvePuzzle={closeModal}\n          solution={[[-2, 0, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]}\n        />\n        <button className=\"close-puzzle-button\" onClick={closeModal}>\n          Close Modal\n        </button>\n      </div>\n      \n    </Modal>\n  )\n}\n\nexport default PuzzleOverlay;","import React from 'react';\nimport './App.css';\nimport PuzzleOverlay from './MyCode/PuzzleOverlay';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PuzzleOverlay showModal={true}></PuzzleOverlay>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Modal from \"react-modal\"\n\nModal.setAppElement('#root');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}